version: "3"
services:
  hfs_community_api:
    build:
      args:
        user: admin
        uid: 1000
      context: ./api/
      dockerfile: Dockerfile
    depends_on:
      - hfs_community_db
    image: hfs_community_api
    container_name: hfs_community_api
    restart: unless-stopped
    working_dir: /var/www/api/
    volumes:
      - ./:/var/www
    networks:
      - default

  #Come back to this if there's time
  hfs_community_client:
    container_name: hfs_community_client
    image: node:lts
    working_dir: /var/www/html/app/
    entrypoint: /bin/bash
    expose:
      - 8001
    volumes:
      - ./client/:/var/www/html/app
    tty: true

  hfs_community_db:
    image: mysql:8.0
    container_name: hfs_community_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: hfs_community_database
      MYSQL_ROOT_PASSWORD: secret
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - 3306:3306
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
    networks:
      - default
  hfs_community_mailhog:
    platform: linux/x86_64
    image: mailhog/mailhog
    container_name: hfs_community_mailhog
    logging:
      driver: 'none'
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - default
  nginx:
    image: nginx:alpine
    container_name: hfs_community_nginx
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d/
    depends_on:
      - hfs_community_api
    networks:
      - default

networks:
  default:
    driver: bridge

#Considerations for improvement
# - Redis installation & link between either/or/both client and api for caching & sessions.
# - PHPredis extension and module installed on API container.